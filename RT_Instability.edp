load "iovtk"
system("mkdir .\\output_atwood\\");

/* Domain geometry */
real L = 1.0;       /* [m], Length */
real H = 3 * L;       /* [m], Heigth */

/* Physical parameters */
/* Atwood = (rho2 - rho1)/(rho2 + rho1) ~ 0.5 */
real rho1 = 3.0;                          /* [kg/m^3], Density of first fluid, rho2 > rho1 */
real rho2 = 1.0;                  /* [kg/m^3], Density of second fluid */
real mu1 = 1e-3;                      /* [Pa*s], Dynamic viscosity of first fluid */
real mu2 = 1e-3;               /* [Pa*s], Dynamic viscosity of second fluid*/
real g = 0.981;                        /* [m/s^2], Gravitational acceleration */
real sigma = 72.86e-3;                    /* [N/m], Surface tension coefficient */

real a = 0.3;
real b = 0.3;

/* Start condition */
real Ux0 = 0.0;      /* [m/s], Initial velocity */
real Uy0 = 0.0;      /* [m/s], Initial velocity */
func phi0 = 1.5 + 0.2 * cos(0.5 * pi + pi * x) - y; /* Initial interface surface */

//((x - 0.5 * L) / a)^2 + ((y - 0.5 * H) / b)^2 - 1;

/* Boundary condition */
real UTopBottomx = 0.0;
real UTopBottomy = 0.0;
real URightLeftx = 0.0;

/* Regularization parameter */
real epsilon = 1e-8;            /* Regularization parameter for continuity equation */
real epsilonH = 0.05;           /* Regularization parameter for Heavyside function*/

/* Function definition */
func real Heavyside(real phi){
    if(phi < -epsilonH){
        return 0.0;
    }else if(phi > epsilonH){
        return 1.0;
    }else{
        return 0.5 * (1 + phi/epsilonH + 1/pi * sin(pi * phi / epsilonH));
    }
}

func real dHdphi(real phi) {
    if(abs(phi) > epsilonH)
        return 0.0;
    else
        return 0.5 / epsilonH * (1.0 + cos(pi * phi / epsilonH));
}

func real rho(real phi){
    return rho1 + (rho2 - rho1) * Heavyside(phi);
}

func real mu(real phi){
    return mu1 + (mu2 - mu1) * Heavyside(phi);
}

/* Time discretization */
real t = 0.0;      /* [s], Time */
real tMax = 3.0;  /* [s], Maximum simulation time */
real dt = 0.1;     /* [s], Time step */
real Nt = tMax / dt;

/* Mesh definition */
int n = 10;
real[int] xP = [0.0, L, L, 0.0];
real[int] yP = [0, 0, H, H];
int[int] nGamma = [L/L, 2.0 * H/L, L/L, 2.0 * H/L] * n;

int labelBottom = 1;
int labelRight = 2;
int labelTop = 3;
int labelLeft = 4;
int[int] labelGamma = [
    labelBottom, labelRight,
    labelTop, labelLeft
];

border GammaDomain(t = 0.0, 1.0; i){
    int iNext = (i + 1) % nGamma.n;
    real t1 = 1 - t;
    x = xP[i] * t1 + xP[iNext] * t;
    y = yP[i] * t1 + yP[iNext] * t;
    label = labelGamma[i];
}

mesh Th = buildmesh(GammaDomain(nGamma));

/* Differential operators */
macro grad(u) [dx(u), dy(u)] //EOM

macro Grad(U) [grad(U#x), grad(U#y)] //EOM

macro div(U) (dx(U#x) + dy(U#y)) //EOM

/* Surface tension tensor */
macro Tension(phi, dxPhi, dyPhi, normPhi) sigma * dHdphi(phi) * [
    [1.0 - dxPhi * dxPhi / normPhi, - dxPhi * dyPhi / normPhi],
    [- dyPhi * dxPhi / normPhi, 1.0 - dyPhi * dyPhi / normPhi]
] //EOM

/* Fespace definition */
fespace Vh2(Th,P2);
fespace Vh1(Th,P1);

Vh2 Ux, Uy, UOldx, UOldy, Vx, Vy; /* Velocity and test fucntion */
Vh1 p, q; /* Pressure and test fucntion */
Vh2 phi, phiOld, dxPhi, dyPhi; /* Surface interface */
Vh2 normPhi;

UOldx = Ux0;
UOldy = Uy0;
phiOld = phi0;

problem NavierStocks([Ux, Uy, p], [Vx, Vy, q]) =
    int2d(Th)(
        /* Transport equation */
        rho(phi) * [Ux, Uy]' * [Vx, Vy]
        + dt * mu(phi) * (Grad(U) : Grad(V))
        - dt * p * div(V)
        /* Continuity equation */
        - epsilon * p * q /* Penalty stabilization term */
        - q * div(U)
    )
    + int2d(Th)(
        /* Gravitation */
        dt * g * rho(phi) * Vy
        - rho(phi) * [
            convect([UOldx, UOldy], -dt, UOldx),
            convect([UOldx, UOldy], -dt, UOldy)
        ]' * [Vx, Vy]
        /* Surface tension */
        //- dt * (Tension(phi, dxPhi, dyPhi, normPhi) : Grad(V))
    )
    + on(labelBottom, labelTop, Ux = UTopBottomx, Uy = UTopBottomy)
    + on(labelLeft, labelRight, Ux = URightLeftx);


int[int] order = [1];


ofstream ftimestep ( "./MapIterToTimeStep50.pvd" );
ftimestep << "<VTKFile type=\"Collection\" version=\"0.1\" byte_order=\"LittleEndian\">" << endl;
ftimestep << "   <Collection>" << endl;


for(int iter = 0; iter < Nt; ++iter){

    /*phi = convect([UOldx, UOldy], -dt, phiOld);
    //dxPhi = dx(phi);
    //dyPhi = dy(phi);
    //normPhi = (dxPhi^2 + dyPhi^2);
    NavierStocks;

    Vh2 h = Heavyside(phi);

    Th = adaptmesh(Th, h,
        err = 0.01,
        nbvx = 100000,
        hmin = 0.01,
        hmax = 0.1,
        iso = true
    );*/

    /*phi = phi;
    phiOld = phiOld;
    Ux = Ux;
    Uy = Uy;
    UOldx = UOldx;
    UOldy = UOldy;
    p = p;

    //plot(Th, h, fill = 1, value = 1);

    Vh1 hP = h;*/

    /*savevtk( ".\\output_atwood_25\\gamma_" + iter + ".vtu",
        Th,
        dataname = "Gamma",
        h,
        order = order
    );*/

    ftimestep << "      <DataSet timestep=\"" + t + "\" file='.\\output_atwood_50\\gamma_" + iter + ".vtu'/>" << endl;

    //UOldx = Ux;
    //UOldy = Uy;
    //phiOld = phi;

    t += dt;
}

ftimestep << "   </Collection>" << endl;
ftimestep << "</VTKFile >" << endl;
