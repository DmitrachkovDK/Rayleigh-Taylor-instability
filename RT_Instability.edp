/* Domain geometry */
real L = 0.2;       /* [m], Length */
real H = 0.5;       /* [m], Half-heigth */

/* Physical parameters */
real rho1 = 1e3;    /* [kg/m^3], Density of first fluid, rho1 < rho2 */
real rho2 = 1.2e3;  /* [kg/m^3], Density of second fluid */
real g = 9.81;      /* [m/s^2], Gravitational acceleration */

real u0 = 0.0;      /* [m/s], Initial velocity */
real v0 = 0.0;      /* [m/s], Initial velocity */
real t = 0.0;       /* [s], Time */
real T = 1.0;       /* [s], Maximum simulation time */
real dt = 0.01;     /* [s], Time step */

real ep = 1e-10;    /* Regularization parameter */

/* Mesh definition */
int n = 10;
real[int] xP = [0.0, L, L, 0.0];
real[int] yP = [-H, -H, H, H];
int[int] nGamma = [L/L, 2.0*H/L, L/L, 2.0*H/L]*n;

int labelBottom = 1;
int labelRight = 2;
int labelTop = 3;
int labelLeft = 4;
int[int] labelGamma = [
    labelBottom, labelRight,
    labelTop, labelLeft
];

border GammaDomain( t = 0.0, 1.0; i ){
    int iNext = (i+1)%nGamma.n;
    x = xP[i]*(1.0 - t) + xP[iNext]*t;
    y = yP[i]*(1.0 - t) + yP[iNext]*t;
    label = labelGamma[i];
}

mesh Th = buildmesh( GammaDomain(nGamma) );
plot(Th);

/* Differential operators */
macro div(u, v) (dx(u) + dy(v)) //
